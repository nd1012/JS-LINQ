/**
 * Parallel LINQ-like execution worker
 * 
 * @github https://github.com/nd1012/JS-LINQ
 * @license MIT
 * @copyright (c)2022 Andreas Zimmermann, wan24.de
 */if("undefined"==typeof WorkerGlobalScope||!(self instanceof WorkerGlobalScope))throw new Error("PLINQ worker seems not to run in a webworker context");const events=new EventTarget,importScriptsOnce=a=>{if(!a.length)return;let b;for(b of a)importedScripts.includes(b)||(importScripts(b),importedScripts.push(b))},importedScripts=[];self.addEventListener("message",async a=>{try{const b=a.data;importScriptsOnce(Array.from(Object.values(b.TypeInfo.values))),"array"==typeof b.Import&&b.Import.length&&importScriptsOnce(b.Import);const c={e:a,handle:!0};if(events.dispatchEvent(new CustomEvent("message",{detail:c})),!c.handle)return;const d=new Function("data","return new "+b.Type+"(data);")(b.Items),e=[];if(b.Parameters){let a;for(a of b.Parameters)switch(a.type){case"JS-LINQ":e.push(LinqArray.FromJson(a.value));break;case"function":e.push(a.value.startsWith("async ")?new Function("...args","return new Promise(resolve=>resolve(await ("+a.value+")(...args));"):new Function("...args","return ("+a.value+")(...args);"));break;case null:e.push(a.value);break;default:debugger;throw new TypeError("Unknown parameter type \""+a.type+"\"");}}const f={context:b,arr:d,param:e,result:null,exception:null};events.dispatchEvent(new CustomEvent("before",{detail:f})),f.result||f.exception||(f.result=await d[b.Method](...e)),events.dispatchEvent(new CustomEvent("after",{detail:f})),postMessage(f.exception?{exception:f.exception}:{result:LinqArray.Helper.IsLinqArray(f.res)?f.res.ToJson():JSON.stringify(f.res)})}catch(b){console.error("PLINQ worker exception",a,b);debugger;const c={exception:b};events.dispatchEvent(new CustomEvent("error",{detail:c})),postMessage({exception:c.exception})}});