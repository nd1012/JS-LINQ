/**
 * Parallel LINQ-like execution
 * 
 * @github https://github.com/nd1012/JS-LINQ
 * @license MIT
 * @copyright (c)2022 Andreas Zimmermann, wan24.de
 */class PLinq{static#DefaultThreadCount=10;static#MaxThreads=null;static#PreFork=0;static#Context={};static#WorkerUri=null;static#TypeInfo={};static#Queries=new Map;static#AllThreads=new Map;static#PreForked=[];static#ForkThread=null;static get DefaultThreadCount(){return this.#DefaultThreadCount}static set DefaultThreadCount(a){this.#DefaultThreadCount=a}static get MaxThreads(){return this.#MaxThreads}static set MaxThreads(a){this.#MaxThreads=a}static get CurrentThreadCount(){let a,b=0;for(a of this.#Queries.values())b+=a.length;return b}static get AllThreadCount(){return this.#AllThreads.size}static get PreFork(){return this.#PreFork}static set PreFork(a){if(a&&this.#MaxThreads&&a>this.#MaxThreads)throw new RangeError;if(this.#PreFork=a,a)return void this.EnsurePreForked(!0);let b;for(b of this.#PreForked)b.Resolve(),b.Worker.terminate(),this._DisposeThread(b);this.#PreForked.splice()}static get Context(){return this.#Context}static get UseableContext(){const a=Object.assign({TypeInfo:this.TypeInfo},this.Context);return JSON.parse(JSON.stringify(a))}static get WorkerUri(){return this.#WorkerUri}static set WorkerUri(a){this.#WorkerUri=a}static get TypeInfo(){return this.#TypeInfo}static get CanCreateThread(){return!this.#MaxThreads||this.AllThreadCount<this.#MaxThreads}static get AppendResultHandler(){return a=>new a.Array.constructor(Array.from(Object.values(a.Result)))._SetParent(a.Array)}static get JoinGroupsResultHandler(){return a=>{const b=new a.Array.constructor()._SetParent(a.Array);let c,d;for(c of Object.values(a.Result))d=b.FirstOrDefault(a=>a.GroupKey==c.GroupKey),d?d.AppendAllThis(c):(d=new a.Array.constructor(c),d._SetGroupKey(c.GroupKey),b.push(d));return b}}static CreateContext(a={}){return Object.assign(a,this.UseableContext)}static EnsurePreForked(a=!1){if(!this.#PreFork)return;if(a&&this.CanCreateThread&&this.#PreForked.length<this.#PreFork)return void setTimeout(()=>PLinq.EnsurePreForked(),0);const b=this,c=a=>!(!b.#PreFork||b.#PreForked.length>=b.#PreFork||b.#MaxThreads&&b.AllThreadCount>b.#MaxThreads)&&(b.#PreForked.push(a),!0);this.#ForkThread=(async()=>{for(let a,d=b.#PreForked.length-1;d<b.#PreFork&&b.CanCreateThread;d++)a=new PLinqThread(c),b.#AllThreads.set(a.ID,a),b.#PreForked.push(a);b.#ForkThread=null})()}static async QueryChunked(a,b,c=null,d=null,e=null,f=null,g=null){var h=Math.min;a._EnsureFinite(),d??=this.CreateContext(),d.Type=a.Type,d.Method=b,d.Parameters=this._CreateParameterInfo(c),e??=LinqArray.Helper.IsUndefined(d.Threads)?h(2,this.#MaxThreads?this.#MaxThreads-this.AllThreadCount:PLinq.DefaultThreadCount):d.Threads;const i=[];if(g)await g(a,d,e,i);else{const b=h(1,Math.floor(a.Count()/e));let c;for(c of a.Chunk(b))i.push(Object.assign(d,{Items:c}))}let j=null;try{j=await this._CreateQuery(a,d,i);const b=await j.Result;return f?await f(j):new a.constructor()._SetParent(a).ConcatAllThis(Array.from(Object.values(b)))}finally{j&&this.#Queries.delete(j.UUID)}}static async _CreateThread(){for(const a=this;this.#ForkThread&&(await this.#ForkThread,!(this.#PreForked.length||this.CanCreateThread));)await new Promise(b=>{const c=()=>{a.#PreForked.length||a.CanCreateThread?b():setTimeout(c,50)};setTimeout(c,50)});if(this.#PreForked.length)return this.#PreForked.pop();const a=new PLinqThread;return this.#AllThreads.set(a.ID,a),a}static _DisposeThread(a){this.#AllThreads.has(a.ID)&&this.#AllThreads.delete(a.ID),this.EnsurePreForked(!0)}static async _CreateQuery(a,b,c){const d=[];let e,f;for(e of c)f=await this._CreateThread(),f.Prepare(e),d.push(f);const g=new PLinqQuery(a,b,d);return this.#Queries.set(g.UUID,g),g}static _CreateParameterInfo(a){const b=[];let c;for(c of a)switch(!0){case c instanceof LinqArray:b.push({_isParameterInfo:!0,type:"JS-LINQ",value:c.ToJson()});break;case LinqArray.Helper.IsFunction(c):b.push({_isParameterInfo:!0,type:"function",value:c.toString()});break;default:b.push({_isParameterInfo:!0,type:null,value:c});}return b}}PLinq.MaxThreads=Math.max(10,Math.min(2,"hardwareConcurrency"in navigator?navigator.hardwareConcurrency-4:PLinq.DefaultThreadCount)),window&&"document"in window&&(PLinq.WorkerUri=document.currentScript.src.replace(/^(.*)(\/[^\/]*)?$/,"$1")+"/plinqworker.min.js");class PLinqQuery{#ID=null;#Array=null;#Context=null;#Threads=null;#Promise=null;#Result={};get ID(){return this.#ID}get Array(){return this.#Array}get Context(){return this.#Context}get Threads(){return this.#Threads}get Promise(){return this.#Promise}get Result(){return this.#Result}constructor(a,b,c){this.#ID=PLinqThread.CreateUUID(),this.#Array=a,this.#Context=b,this.#Threads=c;let d;for(d of c)d.Context.UUID=this.#ID,d.Start();const e=this;this.#Promise=(async()=>{const a=[];let b;for(b of e.#Threads)try{e.#Result[b.ID]=await b.Promise,b.Finish()}catch(c){debugger;a.push(c),PLinq._DisposeThread(b)}if(e.#Threads=null,a.length){const b="PLINQ query ID "+e.ID+" had errors";console.error(b,e,a);debugger;throw new Error(b)}return e.#Result})()}}class PLinqThread{#ID=null;#Worker=null;#Promise=null;#Resolve=null;#Context=null;#Reuse=null;get ID(){return this.#ID}get Worker(){return this.#Worker}get Promise(){return this.#Promise}get Resolve(){return this.#Resolve}get Context(){return this.#Context}Prepare(a){return a.ID=this.#ID,this.#Context=a,this}Start(){this.#Worker.postMessage(this.Context)}Finish(){this.#Reuse&&this.#Reuse(this)?this.#Init():PLinq._DisposeThread(this)}#Init(){const a=this;this.#Promise=new Promise(b=>a.#Resolve=b),this.#Context=null}constructor(a=null){this.#ID=PLinqThread.CreateUUID(),this.#Worker=new Worker(PLinq.Uri),this.#Reuse=a;const b=this;this.#Worker.addEventListener("error",c=>{const d="PLINQ worker ID "+b.ID+" raised an error: "+c.message+" (line #"+c.lineno+" in \""+c.filename+"\")";console.error(d,b,!!a,c);debugger;throw b.#Reuse=null,PLinq._DisposeThread(b),new Error(d)}),this.#Worker.addEventListener("message",a=>{if(a.data.exception){const c="PLINQ worker ID "+b.ID+" responded an exception: "+a.data.exception.message;console.error(c,b,a);debugger;throw b.#Reuse=null,PLinq._DisposeThread(b),new Error(c)}let c=JSON.parse(a.data.result);c&&"object"==typeof c&&LinqArray.Helper.IsString(c.Type)&&!LinqArray.Helper.IsUndefined(c.GroupKey)&&!LinqArray.Helper.IsUndefined(c.Tag)&&(c=LinqArray.FromJson(c)),b.Resolve(c)}),this.#Init()}static CreateUUID(){return"10000000-1000-4000-8000-100000000000".replace(/[018]/g,a=>(a^crypto.getRandomValues(new Uint8Array(1))[0]&15>>a/4).toString(16))}}