/**
 * LINQ array extensions
 * 
 * @github https://github.com/nd1012/JS-LINQ
 * @license MIT
 * @copyright (c)2022 Andreas Zimmermann, wan24.de
 */class LinqArrayExt extends LinqArray{get Type(){return"LinqArrayExt"}InnerJoin(a,b,c,d=null,e=null){return this.Join(a,b,c,d??((c,a)=>({...c,...a})),e)}LeftJoin(a,b,c,d,e=null){return LinqArray.Helper.EnsureLinqArray(a,!0).GroupJoin(this,b,c,(c,a)=>{c,a},e).SelectMany(a=>a.b,(c,a,b,e)=>d(c.a,a,b,e))}RightJoin(a,b,c,d,e=null){return LinqArray.Helper.EnsureLinqArray(a,!0).GroupJoin(this,c,b,(c,a)=>{c,a},e).SelectMany(a=>a.b,(c,a,b,e)=>d(a,c.a,b,e))}FullJoin(a,b,c,d,e,f=null){return b=LinqArray.Helper.EnsureValueGetter(b),c=LinqArray.Helper.EnsureValueGetter(c),a=LinqArray.Helper.EnsureLinqArray(a,!0),this.LeftJoin(a,b,c,d,f).Union(this.RightJoin(a,b,c,e,f))}CrossJoin(a,b){return this.Join(a,a=>a,a=>a,b,()=>!0)}Partition(...a){const b=this._EnsureFinite().constructor,c=LinqArrayExt.Repeat(d=>new b()._SetParent(c)._SetGroupKey(a[d].key),a.length),d=a[0].misfits?new b:null;c._SetParent(this),c.EnsureGenerated(),d&&c.push(d);let e,f;return this.ForEach((b,g)=>{for(e=0,f=!1;!f&&e<a.length;e++)a[e].max&&c[e].length>=a[e].max||!a[e].action(b,g)||(c[e].push(b),f=!0);f||d?.push(b)}),c}async PartitionAsync(...a){const b=this._EnsureFinite().constructor,c=LinqArrayExt.Repeat(d=>new b()._SetParent(c)._SetGroupKey(a[d].key),a.length),d=a[0].misfits?new b:null;c._SetParent(this),c.EnsureGenerated(),d&&c.push(d);let e,f;return await this.ForEachAsync(async(b,g)=>{for(e=0,f=!1;!f&&e<a.length;e++)a[e].max&&c[e].length>=a[e].max||!(await a[e].action(b,g))||(c[e].push(b),f=!0);f||d?.push(b)}),c}Pivot(a,...b){const c=this._EnsureFinite(),d=a?{[a.key]:null}:{};a&&(a.data??=a=>a.GroupKey),b=new LinqArray(b).ForEach(a=>{if(a.key??=a=>a.GroupKey,null==a.group?d[a.key]=null:a.groups=c.GroupBy(a.group).OrderBy(a=>a.GroupKey,null,!0).ForEach((b,c)=>d[a.key(b,c)]=null),LinqArray.Helper.IsFunction(a.data))return;const b=a.data;a.data=a=>a.Sum(a=>+a[b])});const e=null==a?null:this.GroupBy(a.group??a.key).Select(c=>{const e=Object.assign({},d,{[a.key]:a.data(c)});return b.ForEach(a=>(null==a.group?e[a.key]=a.data(c):c.GroupBy(a.group).ForEach((b,c)=>e[a.key(b,c)]=a.data(b)),!0)),e});if(e&&!a.summary)return e;const f=Object.assign({},d);return b.ForEach(a=>(null==a.group?f[a.key]=a.data(c):a.groups.ForEach((b,c)=>f[a.key(b,c)]=a.data(b)),!0)),e?.Append(f)??f}async PivotAsync(a,...b){const c=this._EnsureFinite(),d=a?{[a.key]:null}:{};a&&(a.data??=a=>a.GroupKey),b=await new LinqArray(b).ForEachAsync(async a=>{if(a.key??=a=>a.GroupKey,null==a.group?d[a.key]=null:a.groups=await(await c.GroupByAsync(a.group)).OrderBy(a=>a.GroupKey,null,!0).ForEachAsync(async(b,c)=>d[await a.key(b,c)]=null),LinqArray.Helper.IsFunction(a.data))return;const b=a.data;a.data=a=>a.Sum(a=>+a[b])});const e=null==a?null:await(await this.GroupByAsync(a.group??a.key)).SelectAsync(async c=>{const e=Object.assign({},d,{[a.key]:await a.data(c)});return await b.ForEachAsync(async a=>(null==a.group?e[a.key]=await a.data(c):await(await c.GroupByAsync(a.group)).ForEachAsync(async(b,c)=>e[await a.key(b,c)]=await a.data(b)),!0)),e});if(e&&!a.summary)return e;const f=Object.assign({},d);return await b.ForEachAsync(async a=>(null==a.group?f[a.key]=await a.data(c):await a.groups.ForEachAsync(async(b,c)=>f[await a.key(b,c)]=await a.data(b)),!0)),e?.Append(f)??f}MovingAverage(a=0){return this.Aggregate((a,b)=>(a+b)/2,a)}MovingAverages(a=0){return this.Select(b=>a=(a+b)/2)}TakeEvery(a){let b=0;return this.Where(()=>++b==a?!(b=0):!b)}TakeRandom(){var a=Math.floor;const b=this.IsDynamic?this.ToArray():null,c=(b??this.EnsureGenerated()).length;if(!c)throw new RangeError;return this.IsDynamic?b[a(Math.random()*c)]:this.ElementAt(a(Math.random()*c))}FallbackIfEmpty(a){return this.IsEmpty()?LinqArray.Helper.IsFunction(a)?a(this):a:this}async FallbackIfEmptyAsync(a){return this.IsEmpty()?await a(this):this}Shuffle(a=!1){if(a&&this.IsDynamic)throw new TypeError;return this.OrderBy(()=>Math.random(),null,a)}Doubles(a=null){return this.GroupBy(a).Where(a=>1<a.length)}async DoublesAsync(a){return(await this.GroupByAsync(a)).Where(a=>1<a.length)}Replace(a,b=null,c=null,d=!1){if(d&&this.IsDynamic)throw new TypeError;const e=this._EnsureFinite(),f=LinqArray.Helper.IsFunction(a),g=LinqArray.Helper.IsFunction(b),h=d?null:this._CreateGenerated(function*(){e.ForEach((d,e)=>{(f&&a(d,e)||!f&&(c?c(a,d):a==d))&&(h[e]=g?b(d,e):b)})});return d&&this.ForEach((d,h)=>{(f&&a(d,h)||!f&&(c?c(a,d):a==d))&&(e._Iterable[h]=g?b(d,h):b)}),h??this}async ReplaceAsync(a,b=null,c=null,d=!1){if(d&&this.IsDynamic)throw new TypeError;this._EnsureFinite();const e=LinqArray.Helper.IsFunction(a),f=LinqArray.Helper.IsFunction(b),g=d?this:new this.constructor(this).EnsureGenerated();return d||g._SetParent(this),await this.ForEachAsync(async(d,h)=>{(e&&(await a(d,h))||!e&&(c?c(a,d):a==d))&&(g[h]=f?await b(d,h):b)}),g}constructor(a=null,b=!0,c=!1){super(a,b,c)}static FromCsv(a,b=!0,d=",",e="\"",f=null,g=!0,h=!1){var i=Math.max;return a.endsWith("\n")||(a+="\n"),new this(null,g,h).Generate(function*(){let g,h,i,j,k=[g=""],l=!0,m=h=0;for(i of a){if(i==e)(l=!l)||i!=g||(k[h]+=i);else if(l&&i==d)i=k[++h]="";else if(l&&"\n"==i){if("\r"==g&&(k[h]=k[h].slice(0,-1)),b?!0===b&&(b=k,k=null):b=LinqArray.Range(0,k.length).ToArray(),k){if(k.length!=b.length)throw new RangeError("Invalid row #"+m+" length (expected "+b.length+" fields, got "+k.length+"): "+JSON.stringify(k));for(j={},h=0;h<k.length;j[b[h]]=k[h],h++);yield f?f(j,b,m):j}k=[i=""],h=0,m++}else k[h]+=i;g=i}}(),i(0,a.trim().split("\n").length-(b?1:0)))}static FromXml(a,b="application/xml",c=!0,d=!1){const e=new DOMParser().parseFromString(a,b);let f,g=null;for(f of e.childNodes)if(f.nodeType==Node.ELEMENT_NODE){g=f;break}return g&&g.childNodes.length?this.FromNode(g,!1,c,d):new this(c,d)}static FromNode(a,b=!1,c=!0,d=!1){const e=a=>{const b={},c=a.textContent?.trim()??"";let d,f,g=!1;for(d of a.childNodes)switch(d.nodeType){case Node.ELEMENT_NODE:f=e(d),LinqArray.Helper.IsUndefined(b[d.nodeName])?b[d.nodeName]=f:LinqArray.Helper.IsLinqArray(b[d.nodeName])?b[d.nodeName].push(f):b[d.nodeName]=new this().SetData(b[d.nodeName],f),g=!0;break;case Node.TEXT_NODE:if(""==c||""==(d.textContent?.trim()??""))break;return c;}return g?b:""==c?null:c},f=function*(){let b;for(b of a.childNodes)b.nodeType==Node.ELEMENT_NODE&&(yield e(b))};return b||a.childNodes.length?b?new this().GenerateDynamic(f):new this(null,c,d).Generate(f()):new this(null,c,d)}static FromCursor(a,b=null,c=!0,d=!1){return new this(null,c,d).Generate(function*(){for(let c,d=0;a.count;d++)if(yield a.value,b){if(c=b(a,d),null==c||!a.continue(c))break;}else if(!a.continue())break}())}static async FromCursorAsync(a,b=null){const c=new this;for(let d,e=0;a.count;e++)if(c.push(a.value),b){if(d=await b(a,e),null==d||!(await a.continue(d)))break;}else if(!(await a.continue()))break;return c}static DynamicFromFactory(a){return new this().GenerateDynamic(function*(){yield*a()[Symbol.iterator]()})}static Fibonacci(a=0,b=1){return new this(null,!1).Generate(function*(){for(let c=a+b;;a=b,b=c,c=a+b)yield c}(),Number.POSITIVE_INFINITY)}static RandomInt(a=_NumberMIN_SAFE_INTEGER,b=_NumberMAX_SAFE_INTEGER){var c=Math.ceil;Number.MAX_SAFE_INTEGER;Number.MIN_SAFE_INTEGER;var d=Math.floor;return a=c(a),b=d(b),new this(null,!1).Generate(function*(){for(;;)yield d(Math.random()*(b-a))+a}(),Number.POSITIVE_INFINITY)}static RandomArbitrary(a=Number.MIN_VALUE,b=Number.MAX_VALUE){return new this(null,!1).Generate(function*(){for(;;)yield Math.random()*(b-a)+a}(),Number.POSITIVE_INFINITY)}static PivotRowColumn(a,b=!1,c=null,d=null){return{key:a,group:c,data:d,summary:b}}static PivotGroupColumn(a,b,c=null){return{key:c,group:a,data:b}}static PivotPartitionColumn(a,b){const c=a.length;let d;return{key:null,group:b=>{for(d=0;d<c;d++)if(a[d].action(b))return a[d].key;return null},data:b}}static PivotCalcColumn(a,b){return{key:a,group:null,data:b}}static PartitionInfo(a,b,c=null,d=!0){return{key:a,action:b,max:c,misfits:d}}}window&&(window.From=(a,b=!0,c=!1)=>LinqArrayExt.From(a,b,c)),window&&"document"in window&&!LinqArray.Helper.IsUndefined(window.PLinq)&&(PLinq.TypeInfo.LinqArrayExt=document.currentScript.src);